@prefix rdfs:     <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd:      <http://www.w3.org/2001/XMLSchema#> .
@prefix vamp:     <http://purl.org/ontology/vamp/> .
@prefix plugbase: <http://vamp-plugins.org/rdf/plugins/vamp-example-plugins#> .
@prefix owl:      <http://www.w3.org/2002/07/owl#> .
@prefix dc:       <http://purl.org/dc/elements/1.1/> .
@prefix af:       <http://purl.org/ontology/af/> .
@prefix foaf:     <http://xmlns.com/foaf/0.1/> .
@prefix cc:       <http://web.resource.org/cc/> .
@prefix :         <> .

<>  a   vamp:PluginDescription ;
    foaf:maker          <x> ;
    foaf:maker          <http://www.vamp-plugins.org/doap.rdf#template-generator> ;
    foaf:primaryTopic   <http://vamp-plugins.org/rdf/plugins/vamp-example-plugins> .

:vamp-example-plugins a  vamp:PluginLibrary ;
    vamp:identifier "vamp-example-plugins" ; 
    vamp:available_plugin plugbase:amplitudefollower; 
    vamp:available_plugin plugbase:percussiononsets; 
    vamp:available_plugin plugbase:spectralcentroid; 
    vamp:available_plugin plugbase:zerocrossing .

plugbase:amplitudefollower a   vamp:Plugin ;
    dc:title              "Amplitude Follower" ;
    vamp:name             "Amplitude Follower" ;
    dc:description        "Track the amplitude of the audio signal" ;
    foaf:maker            [ foaf:name "Vamp SDK Example Plugins" ] ; # FIXME could give plugin author's URI here
#   cc:license            <Place plugin license URI here and uncomment> ; 
    vamp:identifier       "amplitudefollower" ;
    vamp:vamp_API_version vamp:api_version_1 ;
    owl:versionInfo       "1" ;
    vamp:input_domain     vamp:TimeDomain ;

    vamp:parameter   plugbase:amplitudefollower_param_attack ;
    vamp:parameter   plugbase:amplitudefollower_param_release ;

    vamp:output     plugbase:amplitudefollower_output_amplitude ;
    .
plugbase:amplitudefollower_param_attack a  vamp:Parameter ;
    vamp:identifier     "attack" ;
    dc:title            "Attack time" ;
    dc:format           "s" ;
    vamp:min_value       0 ;
    vamp:max_value       1 ;
    vamp:unit           "s"  ;
    vamp:default_value   0.01 ;
    vamp:value_names     ();
    .
plugbase:amplitudefollower_param_release a  vamp:Parameter ;
    vamp:identifier     "release" ;
    dc:title            "Release time" ;
    dc:format           "s" ;
    vamp:min_value       0 ;
    vamp:max_value       1 ;
    vamp:unit           "s"  ;
    vamp:default_value   0.01 ;
    vamp:value_names     ();
    .
plugbase:amplitudefollower_output_amplitude a  vamp:DenseOutput ;
    vamp:identifier       "amplitude" ;
    dc:title              "Amplitude" ;
    dc:description        ""  ;
    vamp:fixed_bin_count  "true" ;
    vamp:unit             "V" ;
    vamp:bin_count        1 ;
    vamp:bin_names        ( "");
#   vamp:computes_feature_type  <Place feature type URI here and uncomment> ;
#   vamp:computes_event_type    <Place event type URI here and uncomment> ;
    .
plugbase:percussiononsets a   vamp:Plugin ;
    dc:title              "Simple Percussion Onset Detector" ;
    vamp:name             "Simple Percussion Onset Detector" ;
    dc:description        "Detect percussive note onsets by identifying broadband energy rises" ;
    foaf:maker            [ foaf:name "Vamp SDK Example Plugins" ] ; # FIXME could give plugin author's URI here
#   cc:license            <Place plugin license URI here and uncomment> ; 
    vamp:identifier       "percussiononsets" ;
    vamp:vamp_API_version vamp:api_version_1 ;
    owl:versionInfo       "2" ;
    vamp:input_domain     vamp:FrequencyDomain ;

    vamp:parameter   plugbase:percussiononsets_param_threshold ;
    vamp:parameter   plugbase:percussiononsets_param_sensitivity ;

    vamp:output     plugbase:percussiononsets_output_onsets ;
    vamp:output     plugbase:percussiononsets_output_detectionfunction ;
    .
plugbase:percussiononsets_param_threshold a  vamp:Parameter ;
    vamp:identifier     "threshold" ;
    dc:title            "Energy rise threshold" ;
    dc:format           "dB" ;
    vamp:min_value       0 ;
    vamp:max_value       20 ;
    vamp:unit           "dB"  ;
    vamp:default_value   3 ;
    vamp:value_names     ();
    .
plugbase:percussiononsets_param_sensitivity a  vamp:Parameter ;
    vamp:identifier     "sensitivity" ;
    dc:title            "Sensitivity" ;
    dc:format           "%" ;
    vamp:min_value       0 ;
    vamp:max_value       100 ;
    vamp:unit           "%"  ;
    vamp:default_value   40 ;
    vamp:value_names     ();
    .
plugbase:percussiononsets_output_onsets a  vamp:SparseOutput ;
    vamp:identifier       "onsets" ;
    dc:title              "Onsets" ;
    dc:description        "Percussive note onset locations"  ;
    vamp:fixed_bin_count  "true" ;
    vamp:unit             "" ;
    vamp:bin_count        0 ;
    vamp:bin_names        ();
    vamp:sample_type      vamp:VariableSampleRate ;
    vamp:sample_rate      44100 ;
#   vamp:computes_feature_type  <Place feature type URI here and uncomment> ;
#   vamp:computes_event_type    <Place event type URI here and uncomment> ;
    .
plugbase:percussiononsets_output_detectionfunction a  vamp:DenseOutput ;
    vamp:identifier       "detectionfunction" ;
    dc:title              "Detection Function" ;
    dc:description        "Broadband energy rise detection function"  ;
    vamp:fixed_bin_count  "true" ;
    vamp:unit             "" ;
    a                     vamp:QuantizedOutput ;
    vamp:quantize_step    1  ;
    vamp:bin_count        1 ;
    vamp:bin_names        ( "");
#   vamp:computes_feature_type  <Place feature type URI here and uncomment> ;
#   vamp:computes_event_type    <Place event type URI here and uncomment> ;
    .
plugbase:spectralcentroid a   vamp:Plugin ;
    dc:title              "Spectral Centroid" ;
    vamp:name             "Spectral Centroid" ;
    dc:description        "Calculate the centroid frequency of the spectrum of the input signal" ;
    foaf:maker            [ foaf:name "Vamp SDK Example Plugins" ] ; # FIXME could give plugin author's URI here
#   cc:license            <Place plugin license URI here and uncomment> ; 
    vamp:identifier       "spectralcentroid" ;
    vamp:vamp_API_version vamp:api_version_1 ;
    owl:versionInfo       "2" ;
    vamp:input_domain     vamp:FrequencyDomain ;


    vamp:output     plugbase:spectralcentroid_output_logcentroid ;
    vamp:output     plugbase:spectralcentroid_output_linearcentroid ;
    .
plugbase:spectralcentroid_output_logcentroid a  vamp:DenseOutput ;
    vamp:identifier       "logcentroid" ;
    dc:title              "Log Frequency Centroid" ;
    dc:description        "Centroid of the log weighted frequency spectrum"  ;
    vamp:fixed_bin_count  "true" ;
    vamp:unit             "Hz" ;
    vamp:bin_count        1 ;
    vamp:bin_names        ( "");
#   vamp:computes_feature_type  <Place feature type URI here and uncomment> ;
#   vamp:computes_event_type    <Place event type URI here and uncomment> ;
    .
plugbase:spectralcentroid_output_linearcentroid a  vamp:DenseOutput ;
    vamp:identifier       "linearcentroid" ;
    dc:title              "Linear Frequency Centroid" ;
    dc:description        "Centroid of the linear frequency spectrum"  ;
    vamp:fixed_bin_count  "true" ;
    vamp:unit             "Hz" ;
    vamp:bin_count        1 ;
    vamp:bin_names        ( "");
#   vamp:computes_feature_type  <Place feature type URI here and uncomment> ;
#   vamp:computes_event_type    <Place event type URI here and uncomment> ;
    .
plugbase:zerocrossing a   vamp:Plugin ;
    dc:title              "Zero Crossings" ;
    vamp:name             "Zero Crossings" ;
    dc:description        "Detect and count zero crossing points" ;
    foaf:maker            [ foaf:name "Vamp SDK Example Plugins" ] ; # FIXME could give plugin author's URI here
#   cc:license            <Place plugin license URI here and uncomment> ; 
    vamp:identifier       "zerocrossing" ;
    vamp:vamp_API_version vamp:api_version_1 ;
    owl:versionInfo       "2" ;
    vamp:input_domain     vamp:TimeDomain ;


    vamp:output     plugbase:zerocrossing_output_counts ;
    vamp:output     plugbase:zerocrossing_output_zerocrossings ;
    .
plugbase:zerocrossing_output_counts a  vamp:DenseOutput ;
    vamp:identifier       "counts" ;
    dc:title              "Zero Crossing Counts" ;
    dc:description        "The number of zero crossing points per processing block"  ;
    vamp:fixed_bin_count  "true" ;
    vamp:unit             "crossings" ;
    a                     vamp:QuantizedOutput ;
    vamp:quantize_step    1  ;
    vamp:bin_count        1 ;
    vamp:bin_names        ( "");
#   vamp:computes_feature_type  <Place feature type URI here and uncomment> ;
#   vamp:computes_event_type    <Place event type URI here and uncomment> ;
    .
plugbase:zerocrossing_output_zerocrossings a  vamp:SparseOutput ;
    vamp:identifier       "zerocrossings" ;
    dc:title              "Zero Crossings" ;
    dc:description        "The locations of zero crossing points"  ;
    vamp:fixed_bin_count  "true" ;
    vamp:unit             "" ;
    a                     vamp:QuantizedOutput ;
    vamp:quantize_step    1  ;
    vamp:bin_count        0 ;
    vamp:bin_names        ();
    vamp:sample_type      vamp:VariableSampleRate ;
    vamp:sample_rate      44100 ;
#   vamp:computes_feature_type  <Place feature type URI here and uncomment> ;
#   vamp:computes_event_type    <Place event type URI here and uncomment> ;
    .

